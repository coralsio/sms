<?php

namespace Tests\Feature;

use Corals\Modules\SMS\Models\SMSList;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ListsTest extends TestCase
{
    use DatabaseTransactions;

    protected $list;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_lists_store()
    {
        $code = uniqid('list-');
        $response = $this->post('sms/lists', [
            'code' => $code,
            'label' => 'list',
            'status' => 'active',
        ]);

        $this->list = SMSList::query()->where('code', $code)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('sms/lists');

        $this->assertDatabaseHas('sms_lists', [
            'code' => $this->list->code,
        ]);
    }

    public function test_lists_show()
    {
        $this->test_lists_store();
        if ($this->list) {
            $response = $this->get('sms/lists/' . $this->list->hashed_id);

            $response->assertViewIs('SMS::lists.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_lists_edit()
    {
        $this->test_lists_store();
        if ($this->list) {
            $response = $this->get('sms/lists/' . $this->list->hashed_id . '/edit');

            $response->assertViewIs('SMS::lists.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_lists_update()
    {
        $this->test_lists_store();

        if ($this->list) {
            $response = $this->put('sms/lists/' . $this->list->hashed_id, [
                'code' => $this->list->code,
                'label' => $this->list->label,
                'status' => 'inactive',
            ]);

            $response->assertRedirect('sms/lists');
            $this->assertDatabaseHas('sms_lists', [
                'code' => $this->list->code,
                'status' => 'inactive',
            ]);
        }

        $this->assertTrue(true);
    }
}
