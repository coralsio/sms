<?php

namespace Tests\Feature;

use Corals\Modules\SMS\Models\Provider;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ProvidersTest extends TestCase
{
    use DatabaseTransactions;

    protected $provider;
    protected $supported_providers;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_providers_store()
    {
        $this->supported_providers = Arr::pluck(config('sms.models.provider.supported_providers', []), 'name', 'name');
        $providerKey = array_rand($this->supported_providers);
        $phone = fake()->unique()->phoneNumber();

        $response = $this->post('sms/providers', [
            'name' => 'provider',
            'provider' => $providerKey,
            'phone' => $phone,
            'status' => 'active',
        ]);

        $this->provider = Provider::query()->where('provider', $providerKey)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('sms/providers');

        $this->assertDatabaseHas('sms_providers', [
            'name' => $this->provider->name,
            'provider' => $this->provider->provider,
            'phone' => $this->provider->phone,
        ]);
    }

    public function test_providers_edit()
    {
        $this->test_providers_store();

        if ($this->provider) {
            $response = $this->get('sms/providers/' . $this->provider->hashed_id . '/edit');

            $response->assertViewIs('SMS::providers.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_providers_update()
    {
        $this->test_providers_store();

        if ($this->provider) {
            $providerKey = array_rand($this->supported_providers);

            $response = $this->post('sms/providers', [
                'name' => $this->provider->name,
                'provider' => $providerKey,
                'phone' => $this->provider->phone,
                'status' => $this->provider->status,
            ]);

            $response->assertRedirect('sms/providers');
            $this->assertDatabaseHas('sms_providers', [
                'name' => $this->provider->name,
                'provider' => $providerKey,
                'phone' => $this->provider->phone,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_providers_delete()
    {
        $this->test_providers_store();

        if ($this->provider) {
            $response = $this->delete('sms/providers/' . $this->provider->hashed_id);

            $response->assertStatus(200)->assertSeeText('Provider has been deleted successfully.');

            $this->isSoftDeletableModel(Provider::class);
            $this->assertDatabaseMissing('sms_providers', [
                'name' => $this->provider->name,
                'provider' => $this->provider->provider,
                'phone' => $this->provider->phone,
            ]);
        }
        $this->assertTrue(true);
    }
}
